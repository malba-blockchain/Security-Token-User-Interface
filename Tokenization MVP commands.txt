D:&cd D:\USER\Downloads\ATLAS\Projects\Mastering-Security-Token-ERC-3643\Web3Auth-Mastering\w3a-google-demo&npm run start

npm install
npm run start

d:&cd D:\USER\Downloads\ATLAS\Projects\Mastering-Security-Token-ERC-3643\scaffold-eth-2

yarn hardhat clean
yarn compile --force
yarn deploy --reset --network polygonAmoy

-------------------DONE-------------------

I. Connect web3auth DONE

Client ID Web3Auth Firebase: BF1YoXGl61BMnkGgRhNbAdBEbUWqyUI0Se-tn8T9DL75b9M8iw0TngdWbdBFjkOoYA9YVeQ9Jgy2SM2DHJnbSl4

Client ID Web3Auth Google: BH855-UE0U6H-Cvq1O2ukHMU09JPtllkDAZkFUhiSQEg86iVoD1yaCxpMUa1TzYpWLuXuBsp_VvFnFUUUhJoV1Q

Verifier name: web3auth-google-verifier001

Google Client ID: 947022819304-okcm8e1nq14m0vm8i8bmocpim6th1hep.apps.googleusercontent.com


II. Test interacting with smart contracts already deployed. DONE

III. Deploy smart contracts on testnet and verify them DONE


1. Add api keys required to deploy to Amoney testnet.

polygonscan NV3PM7WWB44UQ95Y29QPRDU3K5Q8RBEYAK
alchemy bW_eK_aRxQsGnt2dPJiYq4K8-UyKTpor
alchemy-amoy https://polygon-amoy.g.alchemy.com/v2/bW_eK_aRxQsGnt2dPJiYq4K8-UyKTpor


2. Make The web3auth wallet the one with tokenIssuer, tokenAgent and tokenAdmin permissions.

Wallets for 
Alice
Bob
and Charlie wallets will be metamask wallets for me.


I cant just use the hardhat wallets because they are of public knowledge any asset sent there will dissapear.

We have 3 options.

A. Generate them using web3auth
B. Generate them using yarn generate | yarn account
C. Generate them using metamask wallet. THE CHOSEN ONE.


3. Deployer wallet is the one I will send funds to deploy the smart contract

4. I will use another gmail account for web3auth to do the whole enrollment process and test normal user functionalities.

yarn deploy --reset --network polygonAmoy

Verify with no parameters in constructor
yarn hardhat-verify --network polygonAmoy CONTRACT_ADDRESS

Verify with parameters in constructor
yarn hardhat-verify --network polygonAmoy CONTRACT_ADDRESS --constructor-args arguments.js

Note: To verify a library smart contract, first you flatten it and then use etherscan to upload the full .sol file.

Mission: All smart contracts deployed and verified and web3auth wallets interacting with them.

-------------------ToDo-------------------


IV. Create interactions with the deployed smart contract using web3auth interface.

1. Interact with the already deployed contract. DONE

2. Create admin buttons to interact with token
-AGENT_ROLE DONE
-DEFAULT_ADMIN_ROLE DONE
-OWNER_ROLE DONE
-BalanceOf DONE
-Allowance DONE
-Compliance DONE
-Decimals DONE
-GetFrozenTokens DONE
-GetRoleAdmin DONE
-HasRole DONE
-IdentityRegistry DONE
-IsFrozen DONE
-Name DONE
-OnchainID DONE
-Paused DONE
-Symbol DONE
-TotalSupply DONE

-Approve DONE
-batchBurn DONE
-batchForcedTransfer  DONE
-batchFreezePartialTokens DONE
-batchMint DONE
-batchSetAddressFrozen DONE
-batchTransfer DONE
-batchTransferFrom  DONE
-batchUnfreezePartialTokens DONE
-burn DONE
-decreaseAllowance  DONE
-forcedTransfer DONE
-freeze partial tokens DONE
-increaseAllowance DONE
-mint DONE
-pause DONE
-recoveryAddress DONE? Find out if I can update the recovery address using token admin not the wallet of the owner.
-AddAddressIdentityRecover (old walletAddress, new wallet address, identityToRecover)
-renounceRole DONE
-revokeRole  DONE
-setAddressFrozen  DONE
-setOnchainID DONE
-transfer DONE
-transferFrom  DONE
-unfreeze partial tokens DONE
-unpause DONE

Add functionalities to interact with the Identity Registry.

-hasRole(address UserAddress) DONE
-identity(address UserAddress) DONE
-investorCountry(address UserAddress) DONE
-isVerified(address UserAddress) DONE

-BatchRegisterIdentity DONE (to be tested)
-DeleteIdentity DONE
-GrantRole DONE
-RegisterIdentity DONE
-UpdateCountry DONE
-UpdateIdentity DONE
-RenounceRole DONE
-RevokeRole DONE

DEFAULT_ADMIN_ROLE
0x0000000000000000000000000000000000000000000000000000000000000000

AGENT_ROLE
0xcab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709

ADMIN_ROLE
0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775

OWNER_ROLE
0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e

TOKEN_ROLE
0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4


Token Contract Address:  0x60E5799fed9ACbdaF36e752a05468f1519b03c6f

Deployer:  0xb44e0C06718534F27847e607B6AE9368798fB974
Token Admin:  0x7a82c50eDDc576d5Cd26b530424D7d465D311bB9
Token Admin Identity: 0xE8dfE7810D8Db63C61632e7a5b0e0aaD717566F3

Adam Wallet:  0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1
Bob Wallet:  0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4
Charlie Wallet:  0x34795B6a05543Fe097C8BbBc221e3119f27B793E

Free Wallet: 0xc6442dbED945a1cf0B747994510a3bCCB8ECb693
Second recovery wallet: 0x350441F8a82680a785FFA9d3EfEa60BB4cA417f8
Charlie identity: 0xd30e99C61B55C360ece31e952B26793a723c0173

NEW WALLET TO ADD: 0x9735eB61d172eC27eBf13b653fd239c7B1b80642
IDENTITY OF NEW WALLET: 0x62372F3B574A1731F75eC178c29c3DE8cC2Dd1E1
Claim ID: 0x7d5a53078c31337f7efbc2df36e820b158577299b77fe95460ec71df51bd2fa2
Claim Topic: 21058371927867831348805940872063328041915844268482959292318913409062147083253
 
 

Signature: 0x037546f4a21e78a36abe9d72891291274df60577e860b8c061e1d5bf622116497ae7bc7f1f1bf9d161aef15a46b9603a485c3516697e54f8535231f1f540e8d61c

Data: 0x536f6d6520636c61696d207075626c696320646174612e

Some claim public data to add

DEPLOYER
0xb44e0C06718534F27847e607B6AE9368798fB974,0xb44e0C06718534F27847e607B6AE9368798fB974,0xb44e0C06718534F27847e607B6AE9368798fB974

ADMIN
0x7a82c50eDDc576d5Cd26b530424D7d465D311bB9,0x7a82c50eDDc576d5Cd26b530424D7d465D311bB9,0x7a82c50eDDc576d5Cd26b530424D7d465D311bB9

ADAM, BOB & CHARLIE
0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1,0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4,0x34795B6a05543Fe097C8BbBc221e3119f27B793E
10000000,10000000,10000000
20000000,20000000,20000000

true,true,true
false,false,false




Add all functions to be able to register a new account in a scalable way.

1. deployIdentityProxy (identityImplementationAuthority.address, danielWallet.address) - sent by deployer - tokenAdmin. New smart contract deployment. DONE

2. identityRegistry.registerIdentity(danielWallet.address, danielIdentity.address, 300) DONE

3. addclaimForUser: Add a claim associated to a specific identity. userIdentity.addClaim() DONE

4. removeClaim: Remove claim associated to a specific identity.
userIdentity.removeClaim() DONE

------
Read
getClaim DONE
getClaimsByTopic DONE
isClaimValid DONE
isClaimRevoked DONE
WHATS THE DIFFERENCE BETWEEN REVOKE AND REMOVE CLAIM?????????
revokedClaims (it receives parameter Claim ID)
revokeClaim 


newWallet
newWalletIdentity_address

0x62372F3B574A1731F75eC178c29c3DE8cC2Dd1E1
0
Extra claim public data

0x7d5a53078c31337f7efbc2df36e820b158577299b77fe95460ec71df51bd2fa2

4. Use getAddresses() account[0] in viem script instead of the hardcoded address




3. Create user buttons to interact with tokens DONE

4. Make it more visually appealing


V. Launch online using vercel/simmilar